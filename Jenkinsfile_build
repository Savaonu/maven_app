pipeline {
    agent {
            label "slave_maven_build"
        }
    environment {
        DOCKER_HUB_CRED = credentials('docker_cred')
        ARTIFACTORY_CRED = credentials('Artifactory_admin')
    }
    parameters {
        string(name: 'image_name', defaultValue: 'maven_image', description: 'Name of the image')
        string(name: 'container_name', defaultValue: 'my_maven_app', description: 'Name of the container')
        string(name: 'sonar_token', defaultValue: 'aca9fee4aae893fa63b46476fb1938ddaac62ed9', description: 'The token from Sonarqube')
        string(name: 'sonar_srv', defaultValue: 'http://172.31.96.59:9000', description: 'The Sonarqube server')
        string(name: 'art_repo', defaultValue: 'docker-virtual.artifactory', description: 'Artifactory docker registry')
    }

    stages {
        stage('Fetch Git') {
            steps {
                // Get some code from a GitHub repository
                git 'https://github.com/Savaonu/maven_app'
            }
        }
        
        stage('Maven build') {
            steps {
                script {
        
                    //sh "mvn deploy -f artifactory-maven-plugin-example/ -s artifactory-maven-plugin-example/settings.xml"
                    def mvnHome = tool 'Maven 3.6.3'
                    sh "'${mvnHome}/bin/mvn' -f app/ package deploy -f app/ -Dusername=${ARTIFACTORY_CRED_USR} -Dpassword=${ARTIFACTORY_CRED_PSW} -D${env.BUILD_NUMBER}"
                }
            }
        }

        
        
        stage('Build Image') {
            steps {
                // Build Image
                sh "docker build -t docker-virtual.artifactory/${params.image_name}:${env.BUILD_NUMBER} . --label \"type=maven_image\""
            }
        }
        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    // Sonarqube check
                    sh "mvn -f app/ sonar:sonar -Dsonar.host.url=${params.sonar_srv} -Dsonar.login=${params.sonar_token}"
                }
            }
        }
        stage("Quality gate") {
            steps {
                // Check if the analysis is good 
                waitForQualityGate abortPipeline: true
            }
        }
        stage('Deploy to Artifactory'){
            steps {
                script {
                    try {
                        // Push to Artifactory docker registry
                        sh "echo \"${ARTIFACTORY_CRED_PSW}\" | docker login -u \"${ARTIFACTORY_CRED_USR}\" docker-virtual.artifactory --password-stdin"
                        sh "docker push docker-virtual.artifactory/${params.image_name}:${env.BUILD_NUMBER}"
                    }
                    catch(error) {
                        retry(2) {
                            echo "Retry deploy"
                            sh "echo \"${ARTIFACTORY_CRED_PSW}\" | docker login -u \"${ARTIFACTORY_CRED_USR}\" docker-virtual.artifactory --password-stdin"
                            sh "docker push docker-virtual.artifactory/${params.image_name}:${env.BUILD_NUMBER}"
                        }
                        echo "Deploy to artifactory failed!!!"
                    }
                }
            }
        }
        stage('Clean images'){
                    steps {
                        // Delete the image pushed to Artifactory
                        sh "docker rmi --force docker-virtual.artifactory/${params.image_name}:${env.BUILD_NUMBER}"
                    }
                }
        stage ('Starting Deploy job') {
            steps {
                build job: 'maven_pipeline_p2', parameters: [[$class: 'StringParameterValue', name: 'tag', value: "${env.BUILD_NUMBER}"]]
            }
        }
    }
}   