pipeline {
    agent {
            label "slave_maven_deploy"
        }
    environment {
        DOCKER_HUB_CRED = credentials('docker_cred')
        ARTIFACTORY_CRED = credentials('Artifactory_admin')
    }
    parameters {
        string(name: 'image_name', defaultValue: 'maven_image', description: 'Name of the image')
        string(name: 'container_name', defaultValue: 'my_maven_app', description: 'Name of the container')
        string(name: 'art_repo', defaultValue: 'docker-virtual.artifactory', description: 'Artifactory docker registry')
        
    }

    stages {
        stage('Cleanup'){
            steps {
                    // Clean old Container
                    sh "chmod +x ./cleanup.sh && ./cleanup.sh "    
            }
        }

        stage('Deploy App'){
            steps {
                script {
                    try {
                        // Pull image from docker registry
                        sh "echo \"${ARTIFACTORY_CRED_PSW}\" | docker login -u \"${ARTIFACTORY_CRED_USR}\" docker-virtual.artifactory --password-stdin"
                        sh "docker pull docker-virtual.artifactory/${params.image_name}:${params.tag}"
                        // Create container
                        sh "docker run -p 8089:8080 -d --name ${params.container_name} docker-virtual.artifactory/${params.image_name}:${params.tag}"
                    }
                    catch(error) {
                        retry(2) {
                            echo "Retry deploy"
                            sh "echo \"${ARTIFACTORY_CRED_PSW}\" | docker login -u \"${ARTIFACTORY_CRED_USR}\" docker-virtual.artifactory --password-stdin"
                            sh "docker pull docker-virtual.artifactory/${params.image_name}:${params.tag}"
                            sh "docker run -p 8089:8080 -d --name ${params.container_name} docker-virtual.artifactory/${params.image_name}:${params.tag}"
                        }
                        echo "The app was not deployed, please check the errors!!!"
                    }
                }
            }
        }
        stage('Check app') {
            steps {
                script {
                    sh "docker ps -f status=running  -f name=${params.image_name} | wc -l > docker_running"
                    result = readFile('docker_running').trim()
                    int res = result as int
                    if (res == 2) {
                        println "The nodejs container is up and running"
                    }
                    else if (res > 2) {
                        println "ERROR: please the env. There are more containers running "
                        currentBuild.result = 'FAILED'
                    }
                    else {
                        println "ERROR: the container is not running"
                        currentBuild.result = 'FAILED'
                    }
                }

            }
            


        }

        stage('Email'){
                    agent {
                         label "lin_node"
                     }
                    steps {
                        // Info via email from windows node
                        emailext body: "<b>Project build successful</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", from: 'jenkins@test.com', mimeType: 'text/html', replyTo: '', subject: "SUCCESSFUL CI: Project name -> ${env.JOB_NAME}", to: "alexandru.sava@accesa.eu";
                    }
        }
    }
    post {
         failure {
                // Info via email about failed job
             sendEmail("Failed");
         }
        unsuccessful {  
              // Info via email about unsuccessful job 
            sendEmail("Unsuccessful");
        } 
    }
    options {
        // Keep only last 10 builds
        buildDiscarder(logRotator(numToKeepStr: '10'))

        // Timeout when job is stuck for more than 2 minutes
        timeout(time: 2, unit: 'MINUTES')
    }
}
def sendEmail(status) {
    mail body: "<b>Project build </b>" + "<b>$status</b>"   + "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", charset: 'UTF-8', from: 'jenkins@test.com', mimeType: 'text/html', replyTo: '', subject: status + "  CI: Project name -> ${env.JOB_NAME}", to: "alexandru.sava@accesa.eu";
} 