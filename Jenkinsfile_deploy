//def valoarea = '117'

pipeline {
    agent {
            label "slave_maven_deploy"
        }
    environment {
        DOCKER_HUB_CRED = credentials('docker_cred')
        ARTIFACTORY_CRED = credentials('Artifactory_admin')
    }
    parameters {
        string(name: 'image_name', defaultValue: 'maven_image', description: 'Name of the image')
        string(name: 'container_name', defaultValue: 'my_maven_app', description: 'Name of the container')
        string(name: 'sonar_token', defaultValue: 'aca9fee4aae893fa63b46476fb1938ddaac62ed9', description: 'The token from Sonarqube')
        string(name: 'sonar_srv', defaultValue: 'http://172.30.68.55:9000', description: 'The Sonarqube server')
        string(name: 'art_repo', defaultValue: 'docker-virtual.artifactory', description: 'Artifactory docker registry')
    }

    stages {
        stage('Get deploy no'){
            steps {
                script {
                    //@NonCPS
                    def jobname = 'maven_pipeline_p1'
                    def art_user = jobname.buildVariables.ARTIFACTORY_CRED
                    println art_user
                    //def jobname = 'maven_pipeline_p1'
                    //sh " myVAr = job.getLastBuild()" 
                    //echo "var is: ${job.getLastBuild()}"
                    //echo "var is : $myVAr"
                    //def valoarea = Jenkins.instance.getItemByFullName('maven_pipeline_p1').getLastBuild()
                    //return valoarea

                    //sh "echo var is: $myVAr "
                    //println myVAr

                    //valoarea = null
                    //sh "echo cacaca: $valoarea ${valoarea} cacac "
                    //println valoarea
                    //sh "docker pull docker-virtual.artifactory/${params.image_name}:${valoarea}"
                    
                }
                   // sh "echo $valoarea ${valoarea} " 
                   //sh "chmod +x ./cleanup.sh && ./cleanup.sh " 
                    //sh "echo \"${ARTIFACTORY_CRED_PSW}\" | docker login -u \"${ARTIFACTORY_CRED_USR}\" docker-virtual.artifactory --password-stdin"
                    //sh "docker pull docker-virtual.artifactory/${params.image_name}:$myVAr"
                    //sh "docker run -p 8089:8080 -d --name ${params.container_name} docker-virtual.artifactory/${params.image_name}:$myVAr"
                

            }
        }  /* 
        stage('Deploy to App'){
            steps {
                    sh "echo ${myVar}"
                    // Clean old Container
                    sh "chmod +x ./cleanup.sh && ./cleanup.sh "    
                    // Push to Artifactory docker registry
                    //withCredentials([usernamePassword(credentialsId: 'ae4a797f-6a03-4dc7-874f-c6683cc2fcba', passwordVariable: 'repo_passw', usernameVariable: 'repo_username')]) {
                     // sh "echo \"${ARTIFACTORY_CRED_PSW}\" | docker login -u \"${ARTIFACTORY_CRED_USR}\" docker-virtual.artifactory --password-stdin"
                     // echo \"${ARTIFACTORY_CRED_PSW}\" | docker login -u \"${ARTIFACTORY_CRED_USR}\" docker-virtual.artifactory --password-stdin"
                    // sh "docker tag $image_name savaonu/$image_name"

                       // sh "docker pull docker-virtual.artifactory/${params.image_name}:${myVAr}"
                        // Create container
                      //  sh "docker run -p 8089:8080 -d --name ${params.container_name} docker-virtual.artifactory/${params.image_name}:${myVAr}"
            }
        }

        stage('Email'){
                    agent {
                         label "lin_node"
                     }
                    steps {
                        // Info via email from windows node
                        emailext body: "<b>Project build successful</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", from: 'jenkins@test.com', mimeType: 'text/html', replyTo: '', subject: "SUCCESSFUL CI: Project name -> ${env.JOB_NAME}", to: "alexandru.sava@accesa.eu";
                    }
        }*/
    }/*
    post {
         failure {
                // Info via email about failed job
             sendEmail("Failed");
         }
        unsuccessful {  
              // Info via email about unsuccessful job 
            sendEmail("Unsuccessful");
        } 
    }*/
   /* options {
        // For example, we'd like to make sure we only keep 10 builds at a time, so
        // we don't fill up our storage!
        buildDiscarder(logRotator(numToKeepStr: '10'))

        // And we'd really like to be sure that this build doesn't hang forever, so
        // let's time it out after an hour.
        timeout(time: 5, unit: 'MINUTES')
    }*/
}
/*def sendEmail(status) {
    mail body: "<b>Project build </b>" + "<b>$status</b>"   + "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", charset: 'UTF-8', from: 'jenkins@test.com', mimeType: 'text/html', replyTo: '', subject: status + "  CI: Project name -> ${env.JOB_NAME}", to: "alexandru.sava@accesa.eu";
} */